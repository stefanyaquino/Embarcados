Para todas as questões, compile-as com o gcc e execute-as via terminal.

1. Crie um "Olá mundo!" em C.

- gcc ola_mundo.c -o ola_mundo (Compilar)
- ./ola_mundo (Executar)

2. Crie um código em C que pergunta ao usuário o seu nome, e imprime no terminal "Ola " e o nome do usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_1':
	$ ./ola_usuario_1
	$ Digite o seu nome: Eu
	$ Ola Eu
	$
- gcc ola_usuario_1.c -o ola_usuario_1(Compilar)
- ./ola_usuario_1 (Executar)


3. Apresente os comportamentos do código anterior nos seguintes casos:
	(a) Se o usuário insere mais de um nome.
		$ ./ola_usuario_1 Eu Mesmo
	Resposta: Ola Eu
	(b) Se o usuário insere mais de um nome entre aspasPor exemplo:
		$ ./ola_usuario_1 "Eu Mesmo"
	Resposta: Ola "Eu
	(c) Se é usado um pipe. Por exemplo:
		$ echo Eu | ./ola_usuario_1
	Resposta: Ola Eu
	(d) Se é usado um pipe com mais de um nome. Por exemplo:
		$ echo Eu Mesmo | ./ola_usuario_1
	Resposta: Ola Eu
	(e) Se é usado um pipe com mais de um nome entre parênteses. Por exemplo:
		$ echo "Eu Mesmo" | ./ola_usuario_1
	Resposta: Ola Eu
	(f) Se é usado o redirecionamento de arquivo. Por exemplo:
		$ echo Ola mundo cruel! > ola.txt
		$ ./ola_usuario_1 < ola.txt
	Resposta: Ola Ola
4. Crie um código em C que recebe o nome do usuário como um argumento de entrada (usando as variáveis argc e *argv[]), e imprime no terminal "Ola " e o nome do usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_2':
	$ ./ola_usuario_2 Eu
	$ Ola Eu
	$

5. Apresente os comportamentos do código anterior nos seguintes casos:
	(a) Se o usuário insere mais de um nome.
		$ ./ola_usuario_2 Eu Mesmo
	Resposta: Ola Eu
	(b) Se o usuário insere mais de um nome entre parênteses. Por exemplo:
		$ ./ola_usuario_2 "Eu Mesmo"
	Resposta: Ola Eu Mesmo
	(c) Se é usado um pipe. Por exemplo:
		$ echo Eu | ./ola_usuario_2
	Resposta: Ola (null)
	(d) Se é usado um pipe com mais de um nome. Por exemplo:
		$ echo Eu Mesmo | ./ola_usuario_2
	Resposta: Ola (null)
	(e) Se é usado um pipe com mais de um nome entre parênteses. Por exemplo:
		$ echo "Eu Mesmo" | ./ola_usuario_2
	Resposta: Ola (null)
	(f) Se é usado o redirecionamento de arquivo. Por exemplo:
		$ echo Ola mundo cruel! > ola.txt
		$ ./ola_usuario_2 < ola.txt
	Respostas: Ola (null)

6. Crie um código em C que faz o mesmo que o código da questão 4, e em seguida imprime no terminal quantos valores de entrada foram fornecidos pelo usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_3':
	$ ./ola_usuario_3 Eu
	$ Ola Eu
	$ Numero de entradas = 2
	$

7. Crie um código em C que imprime todos os argumentos de entrada fornecidos pelo usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_argumentos':
	$ ./ola_argumentos Eu Mesmo e Minha Pessoa
	$ Argumentos: Eu Mesmo e Minha Pessoa
	$

8. Crie uma função que retorna a quantidade de caracteres em uma string, usando o seguinte protótipo:

	int Num_Caracs(char *string);

Salve-a em um arquivo separado chamado 'num_caracs.c'. Salve o protótipo em um arquivo chamado 'num_caracs.h'. Compile 'num_caracs.c' para gerar o objeto 'num_caracs.o'.

Compilar:

- gcc -c num_caracs.c (gera o arquivo .o)


9. Re-utilize o objeto criado na questão 8 para criar um código que imprime cada argumento de entrada e a quantidade de caracteres de cada um desses argumentos. Por exemplo, considerando que o código criado recebeu o nome de 'ola_num_caracs_1':
	$ ./ola_num_caracs_1 Eu Mesmo
	$ Argumento: ./ola_num_caracs_1 / Numero de caracteres: 18
	$ Argumento: Eu / Numero de caracteres: 2
	$ Argumento: Mesmo / Numero de caracteres: 5
	$


- gcc -c ola_num_caracs_1.c (gera o arquivo .o)
- gcc -o ola_num_caracs ola_num_caracs_1.o num_caracs.o (gera o arquivo .exe)



10. Crie um Makefile para a questão anterior.

11. Re-utilize o objeto criado na questão 8 para criar um código que imprime o total de caracteres nos argumentos de entrada. Por exemplo, considerando que o código criado recebeu o nome de 'ola_num_caracs_2':
	$ ./ola_num_caracs_2 Eu Mesmo
	$ Total de caracteres de entrada: 25
	$

12. Crie um Makefile para a questão anterior.